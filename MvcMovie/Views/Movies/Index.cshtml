@model MvcMovie.Models.MovieGenreViewModel

@{
  ViewData["Title"] = "My Movies";
}

<h1>@ViewData["Title"]</h1>

<p>
  <a asp-action="Create">Create New</a>
</p>
<form asp-controller="Movies" asp-action="Index" method="get">
  <p>
    <select asp-for="MovieGenre" asp-items="Model.Genres">
      <option value="">All Genres</option>
    </select>

    Title: <input type="text" asp-for="SearchString" />

    <label for="year">Filter by Year:</label>
    <select name="year" id="year">
      <option value="">All</option>
      @for (int i = DateTime.Now.Year; i >= 1900; i--)
      {
        <option value="@i">@i</option>
      }
    </select>

    <input type="submit" value="Filter" />
  </p>
</form>

<table class="table">
  <thead>
    <tr>
      <th>
        @Html.DisplayNameFor(model => model.Movie[0].Title)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Movie[0].ReleaseYear)
      </th>
      <!-- Other columns as needed -->

      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var item in Model.Movie)
    {
      <tr>
        <td>
          @Html.DisplayFor(modelItem => item.Title)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.ReleaseYear)
        </td>
        <!-- Other columns as needed -->

        <td>
          <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
          <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
          <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
        </td>
      </tr>
    }
  </tbody>
</table>
This example assumes that your Movie model has a property named ReleaseYear. Adjust the property name accordingly based
on your actual model structure. Also, ensure that the controller action (Index in this case) handles the year parameter
correctly, as described in the previous responses.








<table class="table">
  <thead>
    <tr>
      <th>
        @Html.DisplayNameFor(model => model.Movies![0].Title)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Movies![0].ReleaseDate)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Movies![0].Genre)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Movies![0].Price)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Movies![0].Rating)
      </th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var item in Model.Movies!)
    {
      <tr>
        <td>
          @Html.DisplayFor(modelItem => item.Title)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.ReleaseDate)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Genre)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Rating)
        </td>
        <td>
          <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
          <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
          <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
        </td>
      </tr>
    }
  </tbody>
</table>